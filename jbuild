#!/usr/bin/env bash

readonly TODAY_DATE=$(date +%Y.%m.%d)
readonly SCRIPT_DATE="v2023.04.15.r3"

# Build variables
readonly WORKING="working"
readonly OUTPUT="output"
readonly SOURCE="archlive"
readonly LIVEROOT="airootfs"
readonly CONFIG="jovarkos-config"

function error() {
    printf "%b\n" "[\e[1m\e[91mERROR\e[0m]: ${0##*/}: $*" >&2
}

function clean () {
    echo "Cleaning ${WORKING} directory..."
    sudo rm -rf ${WORKING}
}

function confirm_run() {
    read -r -p "Build complete. Would you like to run the ISO? y/N: "
    if [[ "${REPLY}" = "y" ]]; then
        echo "Running ISO..."
        qemu-system-x86_64 \
        -boot order=d,menu=on,reboot-timeout=5000 \
        -m size=3072,slots=0,maxmem=$((3 << 20)) \
        -smp 2 \
        -k en-us \
        -name archiso,process=archiso_0 \
        -device virtio-scsi-pci,id=scsi0 \
        -display sdl \
        -vga virtio \
        -audiodev pa,id=snd0 \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
        -enable-kvm \
        -serial stdio \
        -no-reboot \
        -cdrom ${OUTPUT}/jovarkos-${TODAY_DATE}-x86_64.iso
    else
        echo "Exiting..."
    fi
}

function run_iso() {
    qemu-system-x86_64 \
        -boot order=d,menu=on,reboot-timeout=5000 \
        -m size=3072,slots=0,maxmem=$((3 << 20)) \
        -smp 2 \
        -k en-us \
        -name archiso,process=archiso_0 \
        -device virtio-scsi-pci,id=scsi0 \
        -display sdl \
        -vga virtio \
        -audiodev pa,id=snd0 \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0,hostfwd=tcp::60022-:22 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
        -enable-kvm \
        -serial stdio \
        -no-reboot \
        -cdrom "$1"
}

function list_profiles() {
cat << OPTIONS
Options for '-p' and '--profile':
Profile - see <https://wiki.archlinux.org/title/Archiso#Prepare_a_custom_profile>
for more information
    - Use either 'releng' (Used in Official Monthly Builds) or 'baseline' (Minimal live configuration) as the profile name.
    - Profiles live in the /usr/share/archiso/configs/ directory. Listed below is a list of profiles found on this machine.

OPTIONS
    echo "Available profiles:"

    # Prevent globbing errors
    [[ -d /usr/share/archiso/configs && -r /usr/share/archiso/configs ]] && {

        [[ -s /usr/share/archiso/configs ]] && {

            profiles=(/usr/share/archiso/configs/*)

            # Strip directory components
            printf '%s\n' "${profiles[@]##*/}"
        }
    }
}

function profile() {
    # If no profile is specified, list available profiles
    if (( "${#1}" )); then
        if (( "${#2}" )); then
            # If no path is specified, use the default path
            cp -r "/usr/share/archiso/configs/$1" $2

            cat << MESSAGE
Copied profile $1 to $2

Please edit files in $2 to customize your ISO. Then run 'jbuild -b' from ${PWD} to build your ISO
MESSAGE
        else
            cp -r "/usr/share/archiso/configs/$1" ${SOURCE}

            cat << MESSAGE
Copied profile $1 to ${SOURCE}

Please edit files in ${SOURCE} to customize your ISO. Then run 'jbuild -b' from ${PWD} to build your ISO
MESSAGE
        fi
    else
        list_profiles
        exit 1
    fi
}

function usage() {
cat << USAGE
Usage: jbuild [FLAG] [OPTIONS]
Options:
-b, --build                     Clean working directory and build fresh ISO image using defaults from the ${SOURCE}/profiledef.sh file
-r, --run <path to iso>         Run ISO image
-p, --profile <profile name>    Create new profile using the specified profile name. Run without options to see available profiles.
-h, --help                      Print this help message
-v, --version                   Get the version of this script
Users may also omit '--' in the options above.

USAGE
version
}

m=0

for dep in make mkarchiso; do
    type -P "${dep}" &> /dev/null || {

        error "${dep} is not installed. Please install it and try again."

        # Count missing dependencies
        (( m++ ))
    }
done

# Fail when one or more are missing
(( m )) && exit 1

# Parse command-line options and arguments, send to functions as needed
while (( $# )); do
  case "$1" in
        (-b | --build | build)
            [[ -d "${SOURCE}" ]] || {
                 cat << MENU
Please select profile to build upon:
    releng (Used in Official Monthly Builds)
    baseline (Minimal live configuration)
MENU
                 read -r -p "Profile: " PROFILE

                 cp -r "/usr/share/archiso/configs/${PROFILE}" ${SOURCE}
                 echo "Copied profile ${PROFILE} to ${SOURCE}"
            }

            echo "Clearing ${WORKING} directory before beginning..."

            sudo rm -rf ${WORKING}

            if [[ -d "${CONFIG}" ]]; then
                echo "${CONFIG} directory already exists. Continuing..."
                echo "Copying ${CONFIG}/archlive to $(pwd)..."
                sudo cp ${CONFIG}/archlive . -r

            else
                echo "JovarkOS configuration directory not found in $(pwd). Skipping..."

            fi

            echo "Building ISO..."
            sudo mkarchiso -v -w ${WORKING} -o ${OUTPUT} ${SOURCE} -P "JovarkOS Development Team" -L "JovarkOS Live ${TODAY_DATE}" -A "JovarkOS Live"
            echo "Build complete. ISO is located at ${OUTPUT}/jovarkos-${TODAY_DATE}-x86_64.iso"

            sudo chmod -R 777 ${OUTPUT}

            clean

            exit 0
        ;;
        (-r | --run | run)
            run_iso "$2"
            exit 0
        ;;
        (-c | --clean | clean)
            clean
            exit 0
        ;;
        (-p | --profile | profile)
            # If no profile is specified, list available profiles
            if (( "${#2}" )); then
                # If no path is specified, use the default path
                if (( "${#3}" )); then
                    # If a path is specified, use that path
                    profile "$2" "$3"
                    exit 0
                else
                    profile "$2"
                    exit 0
                fi
            else
                list_profiles
                exit 1
            fi
        ;;
        (--profiles | profiles)
            # If no profile is specified, list available profiles
            list_profiles
            exit 1
        ;;
        (-h | --help | help)
            usage
            exit 0
        ;;
        (-v | --version | version)
            echo "JovarkOS ISO build script ${SCRIPT_DATE}"
            exit 0
        ;;
        (*)
            error "Invalid option: ${1@Q}"
            usage
            exit 1
        ;;
  esac
done

(( $# )) || {

    error "Please provide an argument.\n"
    usage
    exit 1
}
