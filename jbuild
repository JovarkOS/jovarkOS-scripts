#!/usr/bin/env bash

readonly TODAY_DATE='\D{%Y.%m.%d}'
readonly SCRIPT_DATE="v2023.04.14.r2"

# Build variables
readonly WORKING="working"
readonly OUTPUT="output"
readonly SOURCE="archlive"
readonly LIVEROOT="airootfs"
readonly CONFIG="jovarkos-config"


function error() {
    printf "$*\n" >&2
}

function no_archiso_dir() {
   if [[ ! -d "${SOURCE}" ]]; then
cat << MENU
Please select profile to build upon:
    releng (Used in Official Monthly Builds)
    baseline (Minimal live configuration)
MENU
        read -r -p "Profile: " PROFILE
        cp -r "/usr/share/archiso/configs/${PROFILE}" ${SOURCE}
        echo "Copied profile ${PROFILE} to ${SOURCE}"
   fi
}

function clean () {
    echo "Cleaning ${WORKING} directory..."
    sudo rm -rf ${WORKING}
}

function no_mkarchiso () {
    error "mkarchiso is not installed. Please install it and try again."
    exit 1
}

function build_iso() {
    no_archiso_dir
    echo "Clearing ${WORKING} directory before beginning..."
    sudo rm -rf ${WORKING}
    echo "Copying ${CONFIG}/archlive to ${PWD}..."
    sudo cp ${CONFIG}/archlive . -r
    sudo mkarchiso -w ${WORKING} -o ${OUTPUT} ${SOURCE} -P "JovarkOS Development Team" -L "JovarkOS Live ${TODAY_DATE}" -A "JovarkOS Live"
    echo "Build complete. ISO is located at ${OUTPUT}/jovarkos-${TODAY_DATE@P}-x86_64.iso"
    ln -s "${OUTPUT}/jovarkos-${TODAY_DATE@P}-x86_64.iso" > ${OUTPUT}/jovarkos-latest.iso
}

function confirm_run() {
    read -r -p "Build complete. Would you like to run the ISO? y/N: "
    if [[ "${REPLY}" = "y" ]]; then
        echo "Running ISO..."
        qemu-system-x86_64 \
        -boot order=d,menu=on,reboot-timeout=5000 \
        -m "size=3072,slots=0,maxmem=$((3072*1024*1024))" \
        -smp 2 \
        -k en-us \
        -name archiso,process=archiso_0 \
        -device virtio-scsi-pci,id=scsi0 \
        -display sdl \
        -vga virtio \
        -audiodev pa,id=snd0 \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
        -enable-kvm \
        -serial stdio \
        -no-reboot \
        -cdrom ${OUTPUT}/jovarkos-${TODAY_DATE@P}-x86_64.iso
    else
        echo "Exiting..."
    fi
}

function run_iso() {
    qemu-system-x86_64 \
        -boot order=d,menu=on,reboot-timeout=5000 \
        -m "size=3072,slots=0,maxmem=$((3072*1024*1024))" \
        -smp 2 \
        -k en-us \
        -name archiso,process=archiso_0 \
        -device virtio-scsi-pci,id=scsi0 \
        -display sdl \
        -vga virtio \
        -audiodev pa,id=snd0 \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0,hostfwd=tcp::60022-:22 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
        -enable-kvm \
        -serial stdio \
        -no-reboot \
        -cdrom "${OPTARG}"
}

function list_profiles() {
cat << OPTIONS
Options for '-p' and '--profile':
Profile - see <https://wiki.archlinux.org/title/Archiso#Prepare_a_custom_profile>
for more information
    - Use either 'releng' (Used in Official Monthly Builds) or 'baseline' (Minimal live configuration) as the profile name.
    - Profiles live in the /usr/share/archiso/configs/ directory. Listed below is a list of profiles found on this machine.

OPTIONS
echo "Available profiles:"
ls /usr/share/archiso/configs/
}

function profile() {
    # If no profile is specified, list available profiles
    if [[ -z "$2" ]]; then
        list_profiles
    else
    # If no path is specified, use the default path
        3=${SOURCE}
    fi
    cp -r "/usr/share/archiso/configs/$1" $3
    echo "Copied profile $1 to $3"
}

function version() {
    echo "JovarkOS ISO build script ${SCRIPT_DATE}"
}

function usage() {
cat << USAGE
Usage: ./build_iso.sh [FLAG] [OPTIONS]
Options:
-b, --build                     Clean working directory and build fresh ISO image using defaults from the ${SOURCE}/profiledef.sh file
-r, --run <path to iso>         Run ISO image
-p, --profile <profile name>    Create new profile using the specified profile name. Run without options to see available profiles.
-h, --help                      Print this help message
-v, --version                   Get the version of this script
Users may also omit '--' in the options above.

USAGE
version
}

if ! command -v mkarchiso &> /dev/null; then
    error "mkarchiso is not installed. Please install it and try again."
cat << ERROR
To install mkarchiso:
    sudo pacman -S mkarchiso
ERROR
    exit 1
fi


if ! command -v make &> /dev/null; then
    error "make is not installed. Please install it and try again."
cat << ERROR
To install mkarchiso:
    sudo pacman -S make
ERROR
    exit 1
fi



# Parse command-line options and arguments, send to functions as needed
while [[ $# -gt 0 ]]; do
  case "$1" in
        -b | --build | build)
            build_iso
            exit 0
            ;;
        -r | --run | run)
            run_iso
            exit 0
            ;;
        -c | --clean | clean)
            clean
            exit 0
            ;;
        -p | --profile | profile)
            # If no profile is specified, list available profiles
            if [[ -z "$2" ]]; then
                list_profiles
                exit 1
            else 
                # If no path is specified, use the default path
                if [[ -z "$3" ]]; then
                    PROFILE="$2"
                    profile ${PROFILE}
                    exit 0
                else 
                    # If a path is specified, use that path
                    PROFILE="$2"
                    SOURCE="$3"
                    profile ${PROFILE} ${SOURCE}
                    exit 0
                fi
            fi
            ;;
        --profiles | profiles)
            # If no profile is specified, list available profiles
            list_profiles
            exit 1
            ;;
        -h | --help | help)
            usage
            exit 0
            ;;
        -v | --version | version)
            version
            exit 0
        ;;
        -\? | --?)
            echo "Invalid option: -$#" >&2
            usage
            exit 1
        ;;
        :)
            echo "Option -$# requires an argument." >&2
            usage
            exit 1
        ;;
  esac
done

# If no arguments are provided, print help and exit
if [[ $# -eq 0 ]]; then
    error "ERROR: Please provide an argument.\n"
    usage
    exit 1
fi
